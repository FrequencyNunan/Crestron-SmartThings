/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""
#USER_SIMPLSHARP_LIBRARY "SmartThings" 

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
// DIGITAL_INPUT 
DIGITAL_INPUT Switch_On;
DIGITAL_INPUT Switch_Off;
ANALOG_INPUT Dim_Level;

DIGITAL_OUTPUT Switch_On_Fb;
DIGITAL_OUTPUT Switch_Off_Fb;
ANALOG_OUTPUT Dim_Level_Fb;

// ANALOG_INPUT 
// STRING_INPUT 
// BUFFER_INPUT 

// DIGITAL_OUTPUT 
// ANALOG_OUTPUT 
// STRING_OUTPUT 

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

STRING_PARAMETER deviceID[128];

                         
//public string deviceID = "e2b30045-a971-4ce1-bc8c-a65eb5a51ce2";           
//public string category = "switches";


/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
INTEGER StartupLock;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING
String Category[64];

SmartThingsCommandProcessor mySmartThingsCommandProcessor;


/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/


function processFeedback(string Value)
{
	If(Value = "on")
	{
		Switch_On_Fb = On;
		Switch_Off_Fb = Off;
	}
	else If(Value = "off")
	{
		Switch_On_Fb = Off;
		Switch_Off_Fb = On;
	}
	else
	{
		Dim_Level_Fb = atoi(Value);
		If(atoi(Value) > 0)
		{
			Switch_On_Fb = On;
			Switch_Off_Fb = Off;
		}
		Else
		{
			Switch_On_Fb = Off;
			Switch_Off_Fb = On;
		}
	}
	StartupLock = 1;
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
Push Switch_On
{
	If(StartupLock != 0)
	{
		If(Switch_On_Fb = off)
		mySmartThingsCommandProcessor.setDimmerLevel("100",deviceID,category);
	}
}

Push Switch_Off
{
	If(StartupLock != 0)
	{
		If(Switch_Off_Fb = off)
		mySmartThingsCommandProcessor.setDimmerLevel("0",deviceID,category);
	}
}

CHANGE Dim_Level
{
	If(StartupLock != 0)
	{
		If(Dim_Level_Fb != Dim_Level)
			If(Dim_Level <= 100)
				mySmartThingsCommandProcessor.setDimmerLevel(itoa(Dim_Level),deviceID,category);
	}
}

/*
PUSH input
{
    // TODO:  Add code here
}
*/

/*
RELEASE input
{
    // TODO:  Add code here
}
*/

/*
CHANGE input
{
    // TODO:  Add code here
}
*/

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

EVENTHANDLER _onSerialValueChange(SerialChangeEventArgs e)
{
	If(e.deviceID = deviceID)
	{
		//Print("deviceID = %s, deviceValue = %s\n",e.deviceID,e.deviceValue);
		processFeedback(e.deviceValue);
	}
}


/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    StartupLock = 0;
	category="dimmers";
	RegisterEvent(SignalChangeEvents, onSerialValueChange, _onSerialValueChange);
	While(mySmartThingsCommandProcessor.getAuthorized() = 0)
	{
    	processlogic();
	}
	mySmartThingsCommandProcessor.getStatus(deviceID,category);
}
